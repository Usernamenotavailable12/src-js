var c=Object.freeze,y=Object.defineProperty;var e=(o,t)=>c(y(o,"raw",{value:c(t||o.slice())}));function w(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}const{LitElement:b,html:a,css:k}=window.Lit;var p,d,h,g,m;customElements.define("modal-popup",class extends b{static get styles(){return k(p||(p=e(["\n      dialog {\n        padding: 0;\n        border: none;\n        outline: none;\n        border-radius: 5px;\n        max-width: 600px;\n        text-align: center;\n        background-color: transparent;\n      }\n      dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.5);\n      }\n      a {\n        height: 100%;\n        display: inline-block;\n      }\n      img {\n        max-width: 100%;\n        max-height: 100%;\n        cursor: pointer;\n        border-radius: 5px;\n      }\n      .close-button {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background-color: rgb(207, 22, 125);\n        border: none;\n        color: white;\n        outline: none;\n        border-radius: 50%;\n        width: 30px;\n        height: 30px;\n        cursor: pointer;\n        font-size: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n        transition: background-color 0.3s ease;\n      }\n      .close-button:hover {\n        background-color: rgb(116, 15, 90);\n      }\n      .modal-content {\n        position: relative;\n        display: inline-block;\n      }\n      @media(max-width: 600px) {\n        .modal-content {\n          max-width: 90%;\n        }\n        .close-button {\n          width: 24px;\n          height: 24px;\n        }\n      }\n    "])))}static get properties(){return{lang:{type:String,attribute:!0},isOpen:{type:Boolean},imageSrc:{type:String},link:{type:String},linkType:{type:String},maxDisplays:{type:Number}}}constructor(){super(),this.lang="en",this.isOpen=!1,this.imageSrc="",this.link="",this.linkType="",this.maxDisplays=1}connectedCallback(){super.connectedCallback(),this.fetchModalData()}async fetchModalData(){try{const t=await fetch("https://usernamenotavailable12.github.io/manifest/images.json");if(!t.ok)throw new Error("Network response was not ok");const i=await t.json();this.isOpen=i.isOpen,this.maxDisplays=i.maxDisplays||1;const n=i.locales[this.lang]||i.locales.en;this.imageSrc=n.imageUrl,this.link=n.link,this.linkType=n.linkType||"href";const s=parseInt(localStorage.getItem("modalDisplayCount")||"0",10),l=parseInt(localStorage.getItem("modalLastDisplayTime")||"0",10),r=Date.now(),u=1*60*1e3;this.isOpen&&s<this.maxDisplays&&(l===0||r-l>=u)&&(this.shadowRoot.querySelector("dialog").showModal(),localStorage.setItem("modalDisplayCount",(s+1).toString()),localStorage.setItem("modalLastDisplayTime",r.toString()))}catch(t){console.error("Error fetching modal data:",t)}}handleClick(){var t;this.linkType==="navigate"&&((t=window.TMA)!=null&&t.navigate)&&window.TMA.navigate(this.link)}closeModal(){this.shadowRoot.querySelector("dialog").close()}render(){return a(m||(m=e(['\n      <dialog>\n        <div class="modal-content">\n          ','\n          <button class="close-button" @click="','" aria-label="Close modal">Ã—</button>\n        </div>\n      </dialog>\n    '])),this.imageSrc?this.linkType==="href"?a(d||(d=e(['<a href="','"><img src="','" alt="Modal image" /></a>'])),this.link,this.imageSrc):a(h||(h=e(['<img src="','" alt="Modal image" @click="','" />'])),this.imageSrc,this.handleClick):a(g||(g=e(["<p>Loading...</p>"]))),this.closeModal)}});export{w as __vite_legacy_guard};
//# sourceMappingURL=image.js.map

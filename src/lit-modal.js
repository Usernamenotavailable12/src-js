var r=Object.freeze,h=Object.defineProperty;var e=(o,t)=>r(h(o,"raw",{value:r(t||o.slice())}));function b(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}const{LitElement:g,html:i,css:u}=window.Lit;var s,l,c,d,p;customElements.define("modal-popup",class extends g{static get styles(){return u(s||(s=e(["\n      dialog {\n        padding: 0;\n        border: none;\n        outline: none;\n        border-radius: 5px;\n        max-width: 500px;\n        text-align: center;\n        background-color: transparent;\n      }\n      dialog::backdrop {\n        background-color: rgba(0, 0, 0, 0.5);\n      }\n      a {\n        height: 100%;\n        display: inline-block;\n      }\n      img {\n        max-width: 100%;\n        max-height: 100%;\n        cursor: pointer;\n        border-radius: 5px;\n      }\n      .close-button {\n        position: absolute;\n        top: 10px;\n        right: 10px;\n        background-color: rgb(207, 22, 125);\n        border: none;\n        color: white;\n        outline: none;\n        border-radius: 50%;\n        width: 30px;\n        height: 30px;\n        cursor: pointer;\n        font-size: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n        transition: background-color 0.3s ease;\n      }\n      .close-button:hover {\n        background-color: rgb(116, 15, 90);\n      }\n      .modal-content {\n        position: relative;\n        display: inline-block;\n      }\n    "])))}static get properties(){return{lang:{type:String,attribute:!0},isOpen:{type:Boolean},imageSrc:{type:String},link:{type:String},linkType:{type:String}}}constructor(){super(),this.lang="en",this.isOpen=!1,this.imageSrc="",this.link="",this.linkType=""}connectedCallback(){super.connectedCallback(),this.fetchModalData()}async fetchModalData(){try{const t=await fetch("https://usernamenotavailable12.github.io/manifest/images.json");if(!t.ok)throw new Error("Network response was not ok");const a=await t.json();this.isOpen=a.isOpen;const n=a.locales[this.lang]||a.locales.en;this.imageSrc=n.imageUrl,this.link=n.link,this.linkType=n.linkType,this.isOpen&&this.shadowRoot.querySelector("dialog").showModal()}catch(t){console.error("Error fetching modal data:",t)}}handleClick(){var t;this.linkType==="navigate"&&((t=window.TMA)!=null&&t.navigate)&&window.TMA.navigate(this.link)}closeModal(){this.shadowRoot.querySelector("dialog").close()}render(){return i(p||(p=e(['\n      <dialog>\n        <div class="modal-content">\n          ','\n          <button class="close-button" @click="','" aria-label="Close modal">Ã—</button>\n        </div>\n      </dialog>\n    '])),this.imageSrc?this.linkType==="href"?i(l||(l=e(['<a href="','"><img src="','" alt="Modal image" /></a>'])),this.link,this.imageSrc):i(c||(c=e(['<img src="','" alt="Modal image" @click="','" />'])),this.imageSrc,this.handleClick):i(d||(d=e(["<p>Loading...</p>"]))),this.closeModal)}});export{b as __vite_legacy_guard};
//# sourceMappingURL=image.js.map

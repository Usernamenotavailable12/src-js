let amountProgressMR=0;function calculateTimeInterval(){const e=new Date,t=new Date(e);t.setHours(0,0,0,0);const r=new Date(t);return r.setHours(24,0,0,0),{from:t.toISOString(),to:r.toISOString()}}function buildAllProgressBars(e,t){e.forEach((e=>{const r=document.getElementById(e.parentId);r?buildProgressBar(e,r,t):console.warn(`Parent with id ${e.parentId} not found.`)}))}function calculatePercent(e,t,r){const n=t-e;if(0===n)return 0;const s=(r-e)/n*100;return s>100?100:s<0?0:s}function buildProgressBar(e,t,r){const n=Math.round(10*calculatePercent(e.range.start,e.range.end,r))/10,s=e.progress.map((e=>{const t=e.text.toLowerCase().replace(/[^a-z0-9_-]/g,"");return`<div class="current_progress ${n>e.percent?`open-present-${t} progress-achieved`:`present-${t}`}" style="position: absolute; left: ${e.percent}%; transform: translateX(-50%);">${e.text}</div>`})).join("");let o="",a="position: absolute; left: 0;";0===n?o="hidden":n>0&&n<2?o="min-width":n>90?(o="full-radius",a+=`width: ${n}%;`):a+=`width: ${n}%;`;const c=`\n            <div style="display: flex; width: 100%; justify-content: center;">\n                <div class="progressbarInfo" style="position: relative;">${e.range.start}₾ - ${e.range.end}₾</div>\n            </div>\n            <div style="--progress: ${n}%"  class="progressbar progress-${e.range.end}" style="position: relative; width: 100%;">\n                <progress value="${n}" max="100"></progress>\n                ${s}\n            </div>\n        `;t.innerHTML=c;t.querySelector(".progressbar");const i=e.range.start,d=e.range.end,l=`progressbar-style-${Date.now()}`,u=document.createElement("style");u.id=l,document.head.appendChild(u),u.textContent=`\n            .progress-${e.range.end}::before {\n                content: "${i}";\n                position: absolute;\n                top: 50%;\n                transform: translateY(-50%);\n                font-size: 10px;\n                z-index: 4;\n                left: 10px;\n                color: #000;\n            }\n            .progress-${e.range.end}::after {\n                content: "${d}";\n                position: absolute;\n                top: 50%;\n                z-index: 4;\n                transform: translateY(-50%);\n                font-size: 10px;\n                right: 10px;\n                color: #000;\n            }\n        `}async function showProgressBarMrch(){const e=calculateTimeInterval(),t=extractAuthDataFromCookie();if(!t)return 0;try{const r=await fetchGraphQL("\n            query GameSessionStats($userId: ID!, $createdAtFrom: DateTime, $createdAtTo: DateTime) {\n                gameSessionStats(userId: $userId, createdAtFrom: $createdAtFrom, createdAtTo: $createdAtTo) {\n                    totalBet\n                }\n            }\n        ",{userId:t.userId,createdAtFrom:e.from,createdAtTo:e.to});return r.data?.gameSessionStats?.[0]?.totalBet||0}catch(e){return console.error("Error fetching progress data:",e),0}}async function madeProgressBar(){const e=JSON.parse(document.getElementById("progressBarData").textContent),t=await showProgressBarMrch();buildAllProgressBars(e,t),document.getElementById("amodisplay").textContent=`${t} ₾`;[2500,5e3,15e3,25e3].forEach((e=>{const r=document.querySelectorAll(`.present-${e}`);t>=e&&r.forEach((e=>{e.classList.add("progress-achieved")}))}))}
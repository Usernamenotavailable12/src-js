async function fetchSyndicateData(){try{const n=await fetch(API_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:'\n      query SyndicateConnection($orderBy: [SyndicateOrderByInput!] = [{ field: totalOutcomeAmount, direction: DESCENDING }]) {\n        syndicateConnection(\n          brandId: "ab",\n          syndicateIds: [\n            "d75347df2054c066af7cbdeecd82bc464b8882f3",\n            "577c95750b9919ed15ab3c18b8f7ae1d5ffad0a7",\n            "ef2338dd47ed9640e722deec1af0b52b1060b4f7",\n            "564dfd815b8860d125c7ace5d57667a1db264c7a",\n            "5e6b16ee187cab1d552afbc725aa15cecdf22cbe",\n            "fcb426d245da0d0d312f594624c0c54a4ea3f965",\n            "e1e4be1349a5a95d75b8279516ccabbc31847c5e"\n          ],\n          orderBy: $orderBy\n        ) {\n          edges {\n            node {\n              name\n              imageRef\n              stats {\n                maxWinAmount\n                totalOutcomeAmount\n              }\n            }\n          }\n        }\n      }\n    '})}),e=await n.json(),t=document.getElementById("syndicate-container-box");t&&(e?.data?.syndicateConnection?.edges?sessionStorage.setItem("syndicateData",JSON.stringify(e.data.syndicateConnection.edges)):(console.error("Unexpected API response:",e),t.innerHTML="<p>Error fetching data</p>"))}catch(n){const e=document.getElementById("syndicate-container-box");e&&(e.innerHTML="<p>Network error. Please try again later.</p>"),console.error("Fetch error:",n)}}function displayData(n){const e=document.getElementById("syndicate-container-box");e&&(e.innerHTML=n.sort(((n,e)=>{const t=n.node?.stats?.totalOutcomeAmount||0;return(e.node?.stats?.totalOutcomeAmount||0)-t})).slice(0,7).map((n=>{if(!n.node)return"<div>Data not available</div>";const{name:e,imageRef:t,stats:a}=n.node;return`\n            <div style="--syndicate-background-image: url('${t}');" class="syndicate-box">\n              <div\n                class="syndicate-header-box"\n                style="--syndicate-background-image: url('${t}');">\n              </div>\n              <h3 class="syndicateIdentityName">${e||"No Name"}</h3>\n              <p class="totalOutcomeAmount">\n                ${null!=a?.totalOutcomeAmount?a.totalOutcomeAmount.toLocaleString():"N/A"} ₾\n              </p>\n              <p class="maxWinAmount">\n                ${null!=a?.maxWinAmount?a.maxWinAmount.toLocaleString():"N/A"} ₾\n              </p>\n              <p style="display: none" class="maxResultAmount">\n                ${null!=a?.maxResultAmount?a.maxResultAmount.toLocaleString():"N/A"} ₾\n              </p>\n            </div>\n          `})).join(""))}function startSyndicatePolling(){fetchSyndicateData(),setInterval(fetchSyndicateData,36e4),setInterval((()=>{const n=sessionStorage.getItem("syndicateData");n&&displayData(JSON.parse(n))}),1e3)}window.startSyndicatePolling=startSyndicatePolling,setTimeout((()=>{startSyndicatePolling()}),3e3);
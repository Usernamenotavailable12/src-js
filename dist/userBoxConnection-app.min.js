let rewardTimeout;async function fetchActiveUserBoxes(){const n=extractAuthDataFromCookie();if(!n)throw new Error("Unable to retrieve user data.");return(await fetchGraphQL("\n    query UserBoxConnection($userId: ID, $brandId: ID!) {\n      userBoxConnection(userId: $userId, brandId: $brandId, status: ACTIVE) {\n        edges {\n          node {\n            userBoxId\n            status\n            box {\n              name\n              type\n              description\n            }\n          }\n        }\n      }\n    }\n  ",{userId:n.userId,brandId:BRAND_ID})).data.userBoxConnection.edges.map((n=>n.node)).filter((n=>"ACTIVE"===n.status)).filter((n=>["LOOT_BOX","MYSTERY_BOX"].includes(n.box.type)))}async function openBox(n){return(await fetchGraphQL("\n    mutation OpenUserBox($input: OpenUserBoxInput!) {\n      openUserBox(input: $input) {\n        userBox {\n          reward {\n            action {\n              ... on GiveBonusAction {\n                bonus {\n                  name\n                  description\n                  contentId\n                }\n              }\n              ... on GiveAndActivateBonusAction {\n                bonus {\n                  name\n                  description\n                  contentId\n                }\n              }\n              ... on GiveBoxAction {\n                box {\n                  name\n                  description\n                }\n              }\n              ... on ActivateDepositBonusAction {\n                bonus {\n                  name\n                  description\n                  contentId\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ",{input:{userBoxId:n}})).data.openUserBox.userBox.reward.action.map((n=>n.bonus?{type:"BONUS",name:n.bonus.name,description:n.bonus.description,contentId:n.bonus.contentId}:n.box?{type:"BOX",name:n.box.name,description:n.box.description}:void 0))}async function initialize(){clearRewards();const n=await fetchActiveUserBoxes(),e=document.getElementById("boxes");if(e.innerHTML="",0===n.length){const n=document.createElement("div");return n.className="no-active-boxes-message",n.innerText="",n.style.color="#fff",n.style.fontSize="1rem",n.style.textAlign="center",n.style.marginTop="20px",void e.appendChild(n)}for(const t of n){const n=document.createElement("div");n.className=`box ${getBoxTypeClass(t.box.type)}`,n.innerHTML=`\n      <h3>${t.box.name}</h3>\n      <p>${t.box.description}</p>\n      <button class="button reward-button-title" onclick="handleOpenBox('${t.userBoxId}', this)"></button>\n    `,e.appendChild(n)}}function getBoxTypeClass(n){switch(n){case"LOOT_BOX":return"loot-box";case"MYSTERY_BOX":return"mystery-box";case"WHEEL_OF_FORTUNE":return"wheel-of-fortune";default:return""}}async function handleOpenBox(n,e){e.disabled=!0,e.innerText="......";displayRewards(await openBox(n)),e.closest(".box").remove()}function displayRewards(n){clearRewards();const e=document.getElementById("rewards");for(const t of n){const n=document.createElement("div");n.className="reward-item",n.innerHTML=`\n      <p class="reward-title"></p><strong>${t.description}</strong>\n      <div style="background: var(--${t.contentId})" class="reward-image-id"></div>\n    `,e.appendChild(n)}rewardTimeout=setTimeout(clearRewards,7e3)}function clearRewards(){clearTimeout(rewardTimeout),document.getElementById("rewards").innerHTML=""}function clearBoxes(){const n=document.getElementById("boxes");n&&(n.innerHTML="")}
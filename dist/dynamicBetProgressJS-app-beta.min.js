let amountProgressMR=0;function calculateTimeInterval(){const e=new Date,t=new Date(e);t.setHours(0,0,0,0);const r=new Date(t);return r.setHours(24,0,0,0),{from:t.toISOString(),to:r.toISOString()}}async function buildAllProgressBars(e){const t=document.getElementById(e.progressBarParrent);if(!t)return;const r=null!=extractAuthDataFromCookie()?.userId;let n=null;r&&(n=await showProgressBarMrch());const s=e.breakpoints;let o=0,a=await document.documentElement.lang;await(e=>{s.forEach((t=>{e>t.to?(o+=100,document.getElementsByClassName(`present-${t.to}`)[0].classList.add("progress-achieved")):e<=t.from?o+=0:o+=100*(e-t.from)/(t.to-t.from)})),o/=s.length})(n);const i=document.createElement("div");i.classList.add("progress-bars-parrent");let c={ka:"შესვლა",en:"Login",ru:"Вход",tr:"Giriş"},l={ka:"რეგისტრაცია",en:"Register",ru:"Регистрация",tr:"Kayıt"};i.innerHTML=r?100===o?e.complateComponent[a]:`\n      <div class="progress-bar-container">\n          <div class="progress-bar-up-text-container progres-text-container">\n              <div class="pgogress-bar-up-title-content progres-text">${e.upTitleContent[a]}</div>\n              <div class="progress-bar-free-start"> </div>\n                <div class="progress-bar-up-text-inner-container">\n                ${s.map(((e,t)=>{let r=100/s.length*(t+1);return`\n                    <div class="progress-prize-text-container progress-prize-${r}" style="right: ${100-r}%;">\n                        <div class="progress-prize-text text">${e.topContent}</div>\n                    </div>\n                    `})).join("")}\n                </div>\n            </div>\n  \n          <div class="active-progress-bar-container">\n              <div class="active-progress-bar" style="width: calc(${o}% - 10px)"> </div>\n              <div class="progress-bar-curr-points-container">\n                  <div class="progress-bar-free-start"> </div>\n                  <div class="progress-bar-inner-container">\n                      <div class="progress-bar-curr-points" style="right: ${100-o}%;">${n} ₾</div>\n                  </div>\n                  <div class="progress-bar-free-end"> </div>\n              </div>\n  \n          </div>\n  \n          <div class="progress-bar-bottom-text-container progres-text-container">\n              <div class="pgogress-bar-bottom-title-content progres-text">${e.bottomTitleContent[a]}</div>\n              <div class="progress-bar-free-start"> </div>\n                <div class="progress-bar-bottom-text-inner-container">\n                ${s.map(((e,t)=>{let r=100/s.length*(t+1);return`\n                    <div class="progress-prize-text-container progress-prize-${r}" style="right: ${100-r}%;">\n                        <div class="progress-prize-text text">${e.bottomContent}</div>\n                    </div>\n                    `})).join("")}\n                </div>\n                \n          </div>\n  \n      </div>\n    `:`\n        <div class="progress-bar-logout-container">\n          <div class="logoutText">${e.logoutText[a]}</div>\n          <div class="buttonsContainer"> \n            <button class="loginButton" onClick="TMA.execute('LOGIN_CONNECTED')">${c[a]}</button>\n            <button class="registerButton" onClick="TMA.execute('REGISTER')">${l[a]}</button>\n          </div>\n        </div>\n      `,t.innerHTML="",t.appendChild(i)}function calculatePercent(e,t,r){const n=t-e;if(0===n)return 0;const s=(r-e)/n*100;return s>100?100:s<0?0:s}function buildProgressBar(e,t,r){const n=Math.round(10*calculatePercent(e.range.start,e.range.end,r))/10,s=e.progress.map((e=>{const t=e.text.toLowerCase().replace(/[^a-z0-9_-]/g,"");return`<div class="current_progress ${n>e.percent?`open-present-${t} progress-achieved`:`present-${t}`}" style="position: absolute; left: ${e.percent}%; transform: translateX(-50%);">${e.text}</div>`})).join("");let o="",a="position: absolute; left: 0;";0===n?o="hidden":n>0&&n<2?o="min-width":n>90?(o="full-radius",a+=`width: ${n}%;`):a+=`width: ${n}%;`;const i=`\n            <div style="display: flex; width: 100%; justify-content: center;">\n                <div class="progressbarInfo" style="position: relative;">${e.range.start}₾ - ${e.range.end}₾</div>\n            </div>\n            <div style="--progress: ${n}%"  class="progressbar progress-${e.range.end}" style="position: relative; width: 100%;">\n                <progress value="${n}" max="100"></progress>\n                ${s}\n            </div>\n        `;t.innerHTML=i;t.querySelector(".progressbar");const c=e.range.start,l=e.range.end,d=`progressbar-style-${Date.now()}`,p=document.createElement("style");p.id=d,document.head.appendChild(p),p.textContent=`\n            .progress-${e.range.end}::before {\n                content: "${c}";\n                position: absolute;\n                top: 50%;\n                transform: translateY(-50%);\n                font-size: 10px;\n                z-index: 4;\n                left: 10px;\n                color: #000;\n            }\n            .progress-${e.range.end}::after {\n                content: "${l}";\n                position: absolute;\n                top: 50%;\n                z-index: 4;\n                transform: translateY(-50%);\n                font-size: 10px;\n                right: 10px;\n                color: #000;\n            }\n        `}async function showProgressBarMrch(){const e=calculateTimeInterval(),t=extractAuthDataFromCookie();if(!t)return 0;try{const r=await fetchGraphQL("\n            query GameSessionStats($userId: ID!, $createdAtFrom: DateTime, $createdAtTo: DateTime) {\n                gameSessionStats(userId: $userId, createdAtFrom: $createdAtFrom, createdAtTo: $createdAtTo) {\n                    totalBet\n                }\n            }\n        ",{userId:t.userId,createdAtFrom:e.from,createdAtTo:e.to});return r.data?.gameSessionStats?.[0]?.totalBet||0}catch(e){return console.error("Error fetching progress data:",e),0}}function madeProgressBar(){const e=document.getElementById("progressBarData");if(e)try{buildAllProgressBars(JSON.parse(e.textContent))}catch(e){console.error(e)}}
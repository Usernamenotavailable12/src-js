let amountProgressMR=0,cachedProgressData=null;function getProgressData(){if(!cachedProgressData){const e=document.getElementById("progressBarData");if(!e)return console.error("progressBarData element not found"),null;try{cachedProgressData=JSON.parse(e.textContent)}catch(e){return console.error("Error parsing progressBarData:",e),null}}return cachedProgressData}async function buildAllProgressBars(e){const t=document.getElementById(e.progressBarParrent);if(!t)return;const n=null!=extractAuthDataFromCookie()?.userId;let r=null;n&&(r=await showProgressBarMrch());const s=e.breakpoints;let o=0,a=await document.documentElement.lang;await(e=>{s.forEach((t=>{e>t.to?(o+=100,document.getElementsByClassName(`present-${t.to}`)[0]?.classList?.add("progress-achieved")):e<=t.from?o+=0:o+=100*(e-t.from)/(t.to-t.from)})),o/=s.length})(r);const i=document.createElement("div");i.classList.add("progress-bars-parrent");let c={ka:"შესვლა",en:"Login",ru:"Вход",tr:"Giriş"},d={ka:"რეგისტრაცია",en:"Register",ru:"Регистрация",tr:"Kayıt"};i.innerHTML=n?100===o?e.complateComponent[a]:`\n    <div ${o>0?`style="--progress-value: ${o}"`:""} class="progress-bar-container ${o>0?"bet_made":""}">\n          <div class="progress-bar-up-text-container progres-text-container">\n              <div class="pgogress-bar-up-title-content progres-text">${e.upTitleContent[a]}</div>\n              <div class="progress-bar-free-start"> </div>\n                <div class="progress-bar-up-text-inner-container">\n                ${s.map(((e,t)=>{let n=100/s.length*(t+1);return`\n                    <div class="progress-prize-text-container progress-prize-${n}" style="right: ${100-n}%;">\n                        <div class="progress-prize-text text">${e.topContent}</div>\n                    </div>\n                    `})).join("")}\n                </div>\n            </div>\n  \n          <div class="active-progress-bar-container">\n              <div class="active-progress-bar" style="width: calc(${o}% - 10px)"> </div>\n              <div class="progress-bar-curr-points-container">\n                  <div class="progress-bar-free-start"> </div>\n                  <div class="progress-bar-inner-container">\n                      <div class="progress-bar-curr-points" style="right: ${100-o}%;">${r} ₾</div>\n                  </div>\n                  <div class="progress-bar-free-end"> </div>\n              </div>\n  \n          </div>\n  \n          <div class="progress-bar-bottom-text-container progres-text-container">\n              <div class="pgogress-bar-bottom-title-content progres-text">${e.bottomTitleContent[a]}</div>\n              <div class="progress-bar-free-start"> </div>\n                <div class="progress-bar-bottom-text-inner-container">\n                ${s.map(((e,t)=>{let n=100/s.length*(t+1);return`\n                    <div class="progress-prize-text-container progress-prize-${n}" style="right: ${100-n}%;">\n                        <div class="progress-prize-text text">${e.bottomContent}</div>\n                    </div>\n                    `})).join("")}\n                </div>\n                \n          </div>\n  \n      </div>\n    `:`\n        <div class="progress-bar-logout-container">\n          <div class="logoutText">${e.logoutText[a]}</div>\n          <div class="buttonsContainer"> \n            <button class="loginButton" onClick="TMA.execute('LOGIN_CONNECTED')">${c[a]}</button>\n            <button class="registerButton" onClick="TMA.execute('REGISTER')">${d[a]}</button>\n          </div>\n        </div>\n      `,t.innerHTML="",t.appendChild(i)}function calculatePercent(e,t,n){const r=t-e;if(0===r)return 0;const s=(n-e)/r*100;return s>100?100:s<0?0:s}function buildProgressBar(e,t,n){const r=Math.round(10*calculatePercent(e.range.start,e.range.end,n))/10,s=e.progress.map((e=>{const t=e.text.toLowerCase().replace(/[^a-z0-9_-]/g,"");return`<div class="current_progress ${r>e.percent?`open-present-${t} progress-achieved`:`present-${t}`}" style="position: absolute; left: ${e.percent}%; transform: translateX(-50%);">${e.text}</div>`})).join("");let o="",a="position: absolute; left: 0;";0===r?o="hidden":r>0&&r<2?o="min-width":r>90?(o="full-radius",a+=`width: ${r}%;`):a+=`width: ${r}%;`;const i=`\n            <div style="display: flex; width: 100%; justify-content: center;">\n                <div class="progressbarInfo" style="position: relative;">${e.range.start}₾ - ${e.range.end}₾</div>\n            </div>\n            <div style="--progress: ${r}%"  class="progressbar progress-${e.range.end}" style="position: relative; width: 100%;">\n                <progress value="${r}" max="100"></progress>\n                ${s}\n            </div>\n        `;t.innerHTML=i;t.querySelector(".progressbar");const c=e.range.start,d=e.range.end,l=`progressbar-style-${Date.now()}`,g=document.createElement("style");g.id=l,document.head.appendChild(g),g.textContent=`\n            .progress-${e.range.end}::before {\n                content: "${c}";\n                position: absolute;\n                top: 50%;\n                transform: translateY(-50%);\n                font-size: 10px;\n                z-index: 4;\n                left: 10px;\n                color: #000;\n            }\n            .progress-${e.range.end}::after {\n                content: "${d}";\n                position: absolute;\n                top: 50%;\n                z-index: 4;\n                transform: translateY(-50%);\n                font-size: 10px;\n                right: 10px;\n                color: #000;\n            }\n        `}function getDateBasedValue(){const e=getProgressData();if(!e||!e.dateValues)return"0";return e.dateValues[new Intl.DateTimeFormat("en-CA",{timeZone:"Asia/Tbilisi",year:"numeric",month:"2-digit",day:"2-digit"}).format(new Date)]||"0"}async function showProgressBarMrch(){const e=getDateBasedValue(),t=extractAuthDataFromCookie();if(!t)return 0;try{const n=await fetchGraphQL("\n          query UserTournamentConnection($userId: ID, $tournamentId: ID) {\n            userTournamentConnection(userId: $userId, tournamentId: $tournamentId) {\n              edges {\n                node {\n                  points\n                }\n              }\n            }\n          }\n        ",{userId:t.userId,tournamentId:e});return n.data?.userTournamentConnection?.edges[0]?.node?.points||0}catch(e){return console.error("Error fetching progress data:",e),0}}function madeProgressBar(){const e=getProgressData();e&&buildAllProgressBars(e)}
async function fetchSessionInfo(n,e){try{const s=await fetch(API_URL,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({query:"\n        query SessionConnection($userId: ID) {\n            sessionConnection(userId: $userId, last: 15) {\n                edges {\n                    node {\n                        ip\n                        os\n                        browser\n                        createdAt\n                    }\n                }\n            }\n        }\n    ",variables:{userId:n}})});if(!s.ok)throw new Error(`HTTP error! Status: ${s.status}`);const o=await s.json();return o?.data?.sessionConnection?.edges||[]}catch(n){return console.error("Error fetching session information:",n),[]}}function renderSessionInfo(n){const e=document.getElementById("session-list");e&&(e.innerHTML="",0!==n.length?n.forEach((n=>{const{ip:s,os:o,browser:r,createdAt:t}=n.node,a=document.createElement("li");a.innerHTML=`\n            <p><span class="label">IP:</span> ${s}</p>\n            <p><span class="label">OS:</span> ${o}</p>\n            <p><span class="label">Browser:</span> ${r}</p>\n            <p><span class="label">Time:</span> ${formatDate(t)}</p>\n        `,e.appendChild(a)})):e.innerHTML="<li>No session data found.</li>")}async function loadSessionData(){const n=extractAuthDataFromCookie();if(!n||!n.userId||!n.accessToken)return void console.error("Failed to retrieve user ID or access token from cookie.");const{userId:e,accessToken:s}=n;renderSessionInfo(await fetchSessionInfo(e,s))}